/// <reference types="dcl" />
export declare namespace VLMTimer {
    class System implements ISystem {
        private static instance;
        private _components;
        static createAndAddToEngine(): System;
        static registerCustomComponent<T extends ITimerComponent>(component: ComponentConstructor<T>): void;
        addComponentType(component: ComponentConstructor<ITimerComponent>): void;
        private constructor();
        update(dt: number): void;
        private updateComponent;
    }
    /**
     * Execute every X milliseconds
     * @public
     */
    class Interval implements ITimerComponent {
        elapsedTime: number;
        targetTime: number;
        onTargetTimeReached: (ownerEntity: IEntity) => void;
        private onTimeReachedCallback?;
        /**
         * @param millisecs - amount of time in milliseconds
         * @param onTimeReachedCallback - callback for when time is reached
         */
        constructor(millisecs: number, onTimeReachedCallback?: () => void);
        setCallback(onTimeReachedCallback: () => void): void;
    }
    /**
     * Execute once after X milliseconds
     * @public
     */
    class Delay implements ITimerComponent {
        elapsedTime: number;
        targetTime: number;
        onTargetTimeReached: (ownerEntity: IEntity) => void;
        private onTimeReachedCallback?;
        /**
         * @param millisecs - amount of time in milliseconds
         * @param onTimeReachedCallback - callback for when time is reached
         */
        constructor(millisecs: number, onTimeReachedCallback?: () => void);
        setCallback(onTimeReachedCallback: () => void): void;
    }
    /**
     * @public
     */
    interface ITimerComponent {
        elapsedTime: number;
        targetTime: number;
        onTargetTimeReached: (ownerEntity: IEntity) => void;
    }
}
//# sourceMappingURL=VLMTimer.component.d.ts.map