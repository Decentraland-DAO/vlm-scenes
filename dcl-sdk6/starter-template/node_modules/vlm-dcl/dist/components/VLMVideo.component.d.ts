/// <reference types="dcl" />
/// <reference types="env" />
import { VLMBase } from "./VLMBaseConfig.component";
import { VLMClickEvent } from "./VLMClickEvent.component";
import { Audible, Emissive, HasHybridTexture, HasPlaylist, Playable, SimpleTransform, Transformable } from "../shared/interfaces";
export declare namespace VLMVideo {
    const configs: {
        [uuid: string]: DCLConfig;
    };
    const instances: {
        [uuid: string]: DCLInstanceConfig;
    };
    const systems: {
        [uuid: string]: VLMVideoSystem;
    };
    enum SourceTypes {
        NONE = 0,
        IMAGE = 1,
        PLAYLIST = 2,
        LIVE = 3
    }
    enum StreamState {
        NOT_FOUND = 0,
        INACTIVE = 1,
        STATIC = 2,
        LIVE = 3
    }
    class DCLConfig extends VLMBase.MaterialConfig implements HasHybridTexture, Emissive, Audible, HasPlaylist, Playable {
        sk: string;
        parent?: string;
        enabled: boolean;
        customRendering: boolean;
        instanceIds: string[] | any;
        textureMode: SourceTypes;
        roughness: number;
        specularIntensity: number;
        metallic: number;
        emissiveColor: Color3;
        volume: number;
        videoTexture?: VideoTexture;
        imageTexture?: Texture;
        albedoTexture?: VideoTexture | Texture;
        emissiveTexture?: VideoTexture | Texture;
        liveSrc: string;
        playlist: string[];
        isLive: boolean;
        enableLiveStream?: boolean;
        clickEvent?: VLMClickEvent.DCLConfig;
        withCollisions: boolean;
        videoClipId?: string;
        emissiveIntensity: number;
        offType: SourceTypes;
        offImageSrc: string;
        uvsFlipped: boolean;
        constructor(config: VLMConfig);
        private init;
        remove: CallableFunction;
        delete: CallableFunction;
        showAll: CallableFunction;
        createInstance: CallableFunction;
        removeInstance: CallableFunction;
        deleteInstance: CallableFunction;
        addInstance: CallableFunction;
        updateParent: CallableFunction;
        updateCustomId: CallableFunction;
        updateCustomRendering: CallableFunction;
        updateOffType: CallableFunction;
        updateOnAirState: CallableFunction;
        updateOffImage: CallableFunction;
        updateTexture: CallableFunction;
        correctUvs: CallableFunction;
        updateVolume: CallableFunction;
        updatePlaylist: CallableFunction;
        updateClickEvent: CallableFunction;
        start: CallableFunction;
        startLive: CallableFunction;
        startPlaylist: CallableFunction;
        showImage: CallableFunction;
        setLiveState: CallableFunction;
        playNextVideo: CallableFunction;
        stop: CallableFunction;
    }
    class VLMConfig extends DCLConfig {
        instances: VLMInstanceConfig[];
        emission?: number;
        constructor(config: VLMConfig);
    }
    class DCLInstanceConfig extends VLMBase.Instance implements Transformable {
        sk: string;
        configId: string;
        parent?: string;
        enabled: boolean;
        position: SimpleTransform;
        scale: SimpleTransform;
        rotation: SimpleTransform;
        withCollisions: boolean;
        flipUvs: boolean;
        uvsFlipped: boolean;
        defaultClickEvent: VLMClickEvent.DCLConfig;
        clickEvent: VLMClickEvent.DCLConfig;
        constructor(config: DCLConfig, instance: VLMInstanceConfig);
        private init;
        add: CallableFunction;
        delete: CallableFunction;
        remove: CallableFunction;
        correctUvs: CallableFunction;
        updateParent: CallableFunction;
        updateCustomId: CallableFunction;
        updateCustomRendering: CallableFunction;
        updateTransform: CallableFunction;
        updateCollider: CallableFunction;
        updateDefaultClickEvent: CallableFunction;
        updateClickEvent: CallableFunction;
        textureModeIs: CallableFunction;
    }
    class VLMInstanceConfig extends DCLInstanceConfig {
    }
    class VLMVideoSystem implements ISystem {
        enableDebugging: boolean;
        sk: string;
        customId?: string;
        timer: number;
        dtDelay: number;
        video: DCLConfig;
        playlistObservers: Observable<{
            componentId: string;
            videoClipId: string;
            videoStatus: number;
            currentOffset: number;
            totalVideoLength: number;
        }>[];
        playlistData: Array<{
            componentId: string;
            videoClipId: string;
            videoStatus: number;
            currentOffset: number;
            totalVideoLength: number;
            observer?: Observer<{
                componentId: string;
                videoClipId: string;
                videoStatus: number;
                currentOffset: number;
                totalVideoLength: number;
            }>;
        }>;
        videoLength: number;
        videoStatus: number;
        videoProgress: number;
        checkingStatus: boolean;
        isLive: boolean;
        enableLiveStream: boolean;
        playing: boolean;
        playlist: string[];
        playlistIndex: number;
        offType: SourceTypes;
        textureMode: SourceTypes;
        instancesHidden: boolean;
        stopped: boolean;
        initialized: boolean;
        constructor(config: DCLConfig);
        start: CallableFunction;
        stop: CallableFunction;
        kill: CallableFunction;
        update(dt: number): void;
        reset: CallableFunction;
        emptyLoop: CallableFunction;
        liveStreamLoop: CallableFunction;
        playlistLoop: CallableFunction;
        imageLoop: CallableFunction;
        removeVideoObserver: CallableFunction;
        private dbLog;
    }
}
//# sourceMappingURL=VLMVideo.component.d.ts.map