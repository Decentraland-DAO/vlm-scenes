/// <reference types="dcl" />
/// <reference types="env" />
import { VLMClickEvent } from "./VLMClickEvent.component";
import { Emissive, HasImageTexture, SimpleTransform, Transformable } from "../shared/interfaces";
import { VLMBase } from "./VLMBaseConfig.component";
export declare namespace VLMImage {
    const configs: {
        [uuid: string]: DCLConfig;
    };
    const instances: {
        [uuid: string]: DCLInstanceConfig;
    };
    class DCLConfig extends Material implements HasImageTexture, Emissive {
        sk: string;
        customId?: string;
        customRendering: boolean;
        albedoTexture: Texture;
        alphaTexture: Texture;
        emissiveColor: Color3;
        emissiveIntensity: number;
        emissiveTexture: Texture;
        parent?: string;
        enabled: boolean;
        instanceIds: string[];
        imageSrc: string;
        roughness: number;
        specularIntensity: number;
        metallic: number;
        withCollisions: boolean;
        isTransparent: boolean;
        clickEvent?: VLMClickEvent.DCLConfig;
        constructor(config: VLMConfig);
        private init;
        showAll: CallableFunction;
        remove: CallableFunction;
        delete: CallableFunction;
        updateParent: CallableFunction;
        updateCustomId: CallableFunction;
        updateCustomRendering: CallableFunction;
        updateTexture: CallableFunction;
        updateBrightness: CallableFunction;
        updateTransparency: CallableFunction;
        updateClickEvent: CallableFunction;
        createInstance: CallableFunction;
        deleteInstance: CallableFunction;
        removeInstance: CallableFunction;
        addInstance: CallableFunction;
    }
    class VLMConfig extends DCLConfig {
        textureSrc?: string;
        emission?: number;
        instances: VLMInstanceConfig[];
        constructor(config: VLMConfig);
    }
    class DCLInstanceConfig extends VLMBase.Instance implements Transformable {
        sk: string;
        configId: string;
        customId: string;
        customRendering: boolean;
        enabled?: boolean;
        parent?: string;
        position: SimpleTransform;
        scale: SimpleTransform;
        rotation: SimpleTransform;
        defaultClickEvent?: VLMClickEvent.DCLConfig;
        clickEvent?: VLMClickEvent.DCLConfig;
        correctUvs: boolean;
        withCollisions: boolean;
        constructor(config: DCLConfig, instance: VLMInstanceConfig);
        private init;
        add: CallableFunction;
        delete: CallableFunction;
        remove: CallableFunction;
        updateParent: CallableFunction;
        updateCustomId: CallableFunction;
        updateCustomRendering: CallableFunction;
        updateTransform: CallableFunction;
        updateCollider: CallableFunction;
        updateDefaultClickEvent: CallableFunction;
        updateClickEvent: CallableFunction;
    }
    class VLMInstanceConfig extends DCLInstanceConfig {
    }
}
//# sourceMappingURL=VLMImage.component.d.ts.map