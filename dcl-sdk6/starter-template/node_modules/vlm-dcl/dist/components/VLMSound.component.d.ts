/// <reference types="dcl" />
/// <reference types="env" />
import { VLMBase } from "./VLMBaseConfig.component";
import { Audible, Playable, SimpleTransform, Transformable } from "../shared/interfaces";
export declare namespace VLMSound {
    const configs: {
        [uuid: string]: DCLConfig;
    };
    const instances: {
        [uuid: string]: DCLInstanceConfig;
    };
    const systems: {
        [uuid: string]: DCLSoundSystem;
    };
    enum SourceType {
        CLIP = 0,
        LOOP = 1,
        PLAYLIST = 2,
        STREAM = 3
    }
    class DCLConfig extends VLMBase.AudioConfig implements Audible, Playable {
        sk: string;
        customId?: string;
        parent?: string;
        enabled: boolean;
        audioPath: string;
        instanceIds: string[];
        volume: number;
        audioClip: AudioClip;
        audioStream?: AudioStream;
        customRendering?: boolean;
        sourceType: SourceType;
        showLocators: boolean;
        constructor(config: VLMConfig);
        remove: CallableFunction;
        delete: CallableFunction;
        showAll: CallableFunction;
        createInstance: CallableFunction;
        removeInstance: CallableFunction;
        deleteInstance: CallableFunction;
        addInstance: CallableFunction;
        updateParent: CallableFunction;
        updateCustomId: CallableFunction;
        updateAllTransforms: CallableFunction;
        updateVolume: CallableFunction;
        updateSource: CallableFunction;
        updateSourceType: CallableFunction;
        toggleLocators: CallableFunction;
        updatePlaylist: CallableFunction;
        start: CallableFunction;
        startLive: CallableFunction;
        startPlaylist: CallableFunction;
        playNextClip: CallableFunction;
        stop: CallableFunction;
    }
    class VLMConfig extends DCLConfig {
        instances: VLMInstanceConfig[];
        constructor(config: VLMConfig);
    }
    class DCLInstanceConfig extends VLMBase.Instance implements Transformable {
        sk: string;
        configId: string;
        parent?: string;
        enabled: boolean;
        position: SimpleTransform;
        scale: SimpleTransform;
        rotation: SimpleTransform;
        volume: number;
        loop: boolean;
        constructor(config: DCLConfig, instance: VLMInstanceConfig);
        add: CallableFunction;
        delete: CallableFunction;
        remove: CallableFunction;
        updateParent: CallableFunction;
        updateCustomId: CallableFunction;
        updateTransform: CallableFunction;
    }
    class VLMInstanceConfig extends DCLInstanceConfig {
    }
    class DCLSoundSystem implements ISystem {
        sk: string;
        customId?: string;
        timer: number;
        dtDelay: number;
        config: DCLConfig;
        videoStatus: number;
        checkingStatus: boolean;
        live: boolean;
        playing: boolean;
        initialCheckComplete: boolean;
        instancesHidden: boolean;
        stopped: boolean;
        constructor(config: DCLConfig);
        start: CallableFunction;
        stop: CallableFunction;
        update(): void;
        statusCheckDelay: number;
        checkStreamStatus: CallableFunction;
        setLiveState: CallableFunction;
    }
}
//# sourceMappingURL=VLMSound.component.d.ts.map