/// <reference types="dcl" />
/// <reference types="env" />
import { UserData } from "@decentraland/Identity";
import { VLMWidget } from "./components/VLMWidget.component";
import { VLMVideo } from "./components/VLMVideo.component";
import { VLMImage } from "./components/VLMImage.component";
import { VLMNFT } from "./components/VLMNFT.component";
import { VLMSound } from "./components/VLMSound.component";
/**
 * The main entry point for the VLM library.
 * @public
 */
export declare abstract class VLM {
    static version: string;
    static activeServer: string;
    static uiCanvas: UICanvas;
    static user: UserData;
    /**
     * Initializes the VLM library with the given configuration.
     * @param config - The VLM initialization options.
     * @public
     */
    static init: CallableFunction;
    static configureWidgets: CallableFunction;
    static sendMessage: CallableFunction;
    static onMessage: CallableFunction;
    static setState: CallableFunction;
    static getState: CallableFunction;
    static recordAction: CallableFunction;
    static Storage: {
        videos: {
            configs: {
                [uuid: string]: VLMVideo.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMVideo.DCLInstanceConfig;
            };
            systems: {
                [uuid: string]: VLMVideo.VLMVideoSystem;
            };
        };
        images: {
            configs: {
                [uuid: string]: VLMImage.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMImage.DCLInstanceConfig;
            };
        };
        nfts: {
            configs: {
                [uuid: string]: VLMNFT.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMNFT.DCLInstanceConfig;
            };
        };
        sounds: {
            configs: {
                [uuid: string]: VLMSound.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMSound.DCLInstanceConfig;
            };
            systems: {
                [uuid: string]: VLMSound.DCLSoundSystem;
            };
        };
        widgets: {
            configs: {
                [uuid: string]: VLMWidget.DCLConfig;
            };
        };
    };
    static storage: {
        videos: {
            configs: {
                [uuid: string]: VLMVideo.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMVideo.DCLInstanceConfig;
            };
            systems: {
                [uuid: string]: VLMVideo.VLMVideoSystem;
            };
        };
        images: {
            configs: {
                [uuid: string]: VLMImage.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMImage.DCLInstanceConfig;
            };
        };
        nfts: {
            configs: {
                [uuid: string]: VLMNFT.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMNFT.DCLInstanceConfig;
            };
        };
        sounds: {
            configs: {
                [uuid: string]: VLMSound.DCLConfig;
            };
            instances: {
                [uuid: string]: VLMSound.DCLInstanceConfig;
            };
            systems: {
                [uuid: string]: VLMSound.DCLSoundSystem;
            };
        };
        widgets: {
            configs: {
                [uuid: string]: VLMWidget.DCLConfig;
            };
        };
    };
}
export type VLMStorage = {
    video: {
        configs: VLMVideo.DCLConfig[];
        instances: VLMVideo.DCLInstanceConfig;
        systems: VLMVideo.VLMVideoSystem;
    };
    image: {
        configs: VLMImage.DCLConfig[];
        instances: VLMImage.DCLInstanceConfig;
    };
    nft: {
        configs: VLMNFT.DCLConfig[];
        instances: VLMNFT.DCLInstanceConfig;
    };
    sound: {
        configs: VLMSound.DCLConfig[];
        instances: VLMSound.DCLInstanceConfig[];
        systems: VLMSound.DCLSoundSystem[];
    };
    widget: {
        configs: VLMWidget.DCLConfig[];
    };
};
//# sourceMappingURL=app.d.ts.map