/// <reference types="dcl" />
/// <reference types="env" />
import { UserData } from "@decentraland/Identity";
import { VLMSession } from "../components/VLMSession.component";
import { SceneJsonData } from "@decentraland/ParcelIdentity";
import { ColyClient, ColyRoom } from "../shared/interfaces";
export declare abstract class VLMSessionManager {
    static dclUserData: UserData;
    static sessionUser: VLMSession.User;
    static sessionData: VLMSession.Config;
    static client: ColyClient;
    static playerPathId?: string;
    static eventsBound: boolean;
    static sceneRoom: ColyRoom;
    static platformData: PlatformData;
    static connected: boolean;
    static connecting: boolean;
    static events: EventManager;
    static start: CallableFunction;
    static end: CallableFunction;
    static requestToken: CallableFunction;
    static joinRelayRoom: CallableFunction;
    static reconnect: CallableFunction;
    static getPlatformData: CallableFunction;
}
export type VLMSceneJsonData = SceneJsonData & {
    vlm?: {
        sceneId?: string;
    };
};
export type RealmData = {
    serverName?: string;
    layer?: string;
    displayName?: string;
    domain?: string;
    layerId?: string;
    serverURL?: string;
    usersCount?: number;
    capacity?: number;
    maxUsers?: number;
    usersParcels?: string[];
    usersCountByLayer?: {
        [key: string]: number;
    };
    usersParcelsByLayer?: {
        [key: string]: string[];
    };
};
export type PlatformData = {
    vlmVersion?: string;
    user?: UserData;
    baseParcel?: string;
    sceneJsonData?: VLMSceneJsonData;
    sceneId?: string;
    subPlatform?: string;
    world?: string;
    environment?: string;
    location?: {
        world: string;
        location?: string;
        coordinates?: string[] | number[];
        parcels?: string[];
        realm: RealmData;
    };
};
//# sourceMappingURL=VLMSession.logic.d.ts.map