/// <reference types="dcl" />
/// <reference types="env" />
import { VLMModeration } from "../components/VLMModeration.component";
type ParcelBound = {
    x: number;
    z: number;
    n: number;
    e: number;
    s: number;
    w: number;
    nr: number;
    er: number;
    sr: number;
    wr: number;
    hasAdjacentNorth?: boolean;
    hasAdjacentEast?: boolean;
    hasAdjacentSouth?: boolean;
    hasAdjacentWest?: boolean;
};
declare class Blackout extends UIContainerRect {
    text: UIText;
    exitLink: UIText;
    exitClickBox: UIImage;
    constructor();
    bannedUser: CallableFunction;
    bannedWearable: CallableFunction;
    accessRestricted: CallableFunction;
    hide: CallableFunction;
}
export declare abstract class VLMModerationManager implements ISystem {
    static moderationSettings: VLMModeration.DCLConfig;
    static accessAllowed: boolean;
    static bannedUser: boolean;
    static bannedWearable: boolean;
    static initialized: boolean;
    static canvas: UICanvas;
    static blackout: Blackout;
    static inScene: boolean;
    static parcels: string[];
    static baseParcel: {
        x: number;
        z: number;
    };
    static sceneHeight: number;
    static parcelBounds: ParcelBound[];
    static walls: Entity[];
    static messages: {
        bannedUser: string;
        bannedWearable: string;
        accessRestricted: string;
    };
    static crashUser: boolean;
    static timer: number;
    static memoryHog: string[];
    static update(dt: number): any;
    static setCrashUser: CallableFunction;
    private static crash;
    static init: () => Promise<void>;
    static updateSettings: (config: VLMModeration.VLMConfig) => Promise<void>;
    static updateModeration: () => void;
    static runModerationChecks: () => Promise<void>;
    static wearableCheck: (wearableList: {
        contractAddress: string;
        itemId: string;
    }[]) => boolean;
    static hasAllowedWearables: () => boolean;
    static hasBannedWearables: () => boolean;
    static isBannedUser: () => boolean;
    static isAllowedUser: () => boolean;
    static banAction: () => void;
    static readmitAction: () => void;
    static blackoutScreen: () => void;
    static movePlayer: () => void;
    static findSceneBounds: () => Promise<void>;
    static createWalls: () => void;
    static removeWalls: () => void;
    static updateWalls: () => void;
    static setWallMaterial: (wallMat: Material) => void;
}
export {};
//# sourceMappingURL=VLMModeration.logic.d.ts.map